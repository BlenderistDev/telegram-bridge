// source: proto/telegram.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.telegram.Dialog', null, global);
goog.exportSymbol('proto.telegram.DialogResponse', null, global);
goog.exportSymbol('proto.telegram.DialogsResponse', null, global);
goog.exportSymbol('proto.telegram.GetUserRequest', null, global);
goog.exportSymbol('proto.telegram.LoginMessage', null, global);
goog.exportSymbol('proto.telegram.Message', null, global);
goog.exportSymbol('proto.telegram.MuteUserRequest', null, global);
goog.exportSymbol('proto.telegram.NotifySettings', null, global);
goog.exportSymbol('proto.telegram.Result', null, global);
goog.exportSymbol('proto.telegram.SendMessageRequest', null, global);
goog.exportSymbol('proto.telegram.SignMessage', null, global);
goog.exportSymbol('proto.telegram.User', null, global);
goog.exportSymbol('proto.telegram.UserResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.LoginMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.LoginMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.LoginMessage.displayName = 'proto.telegram.LoginMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.SignMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.SignMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.SignMessage.displayName = 'proto.telegram.SignMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.Result.displayName = 'proto.telegram.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.GetUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.GetUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.GetUserRequest.displayName = 'proto.telegram.GetUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.User.displayName = 'proto.telegram.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.UserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.UserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.UserResponse.displayName = 'proto.telegram.UserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.SendMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.SendMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.SendMessageRequest.displayName = 'proto.telegram.SendMessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.DialogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.telegram.DialogsResponse.repeatedFields_, null);
};
goog.inherits(proto.telegram.DialogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.DialogsResponse.displayName = 'proto.telegram.DialogsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.DialogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.DialogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.DialogResponse.displayName = 'proto.telegram.DialogResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.Dialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.Dialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.Dialog.displayName = 'proto.telegram.Dialog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.NotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.NotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.NotifySettings.displayName = 'proto.telegram.NotifySettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.Message.displayName = 'proto.telegram.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.telegram.MuteUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.telegram.MuteUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.telegram.MuteUserRequest.displayName = 'proto.telegram.MuteUserRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.LoginMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.LoginMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.LoginMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.LoginMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.LoginMessage}
 */
proto.telegram.LoginMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.LoginMessage;
  return proto.telegram.LoginMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.LoginMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.LoginMessage}
 */
proto.telegram.LoginMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.LoginMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.LoginMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.LoginMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.LoginMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string phone = 1;
 * @return {string}
 */
proto.telegram.LoginMessage.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.LoginMessage} returns this
 */
proto.telegram.LoginMessage.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.SignMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.SignMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.SignMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.SignMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.SignMessage}
 */
proto.telegram.SignMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.SignMessage;
  return proto.telegram.SignMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.SignMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.SignMessage}
 */
proto.telegram.SignMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.SignMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.SignMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.SignMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.SignMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.telegram.SignMessage.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.SignMessage} returns this
 */
proto.telegram.SignMessage.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.Result}
 */
proto.telegram.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.Result;
  return proto.telegram.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.Result}
 */
proto.telegram.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.telegram.Result.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Result} returns this
 */
proto.telegram.Result.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.GetUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.GetUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.GetUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.GetUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.GetUserRequest}
 */
proto.telegram.GetUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.GetUserRequest;
  return proto.telegram.GetUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.GetUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.GetUserRequest}
 */
proto.telegram.GetUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.GetUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.GetUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.GetUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.GetUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string peer = 1;
 * @return {string}
 */
proto.telegram.GetUserRequest.prototype.getPeer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.GetUserRequest} returns this
 */
proto.telegram.GetUserRequest.prototype.setPeer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.User.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    self: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    contact: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    mutualcontact: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    deleted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    bot: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    botchathistory: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    botnochats: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    verified: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    restricted: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    min: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    botinlinegeo: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    support: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    scam: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    applyminphoto: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    fake: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    id: jspb.Message.getFieldWithDefault(msg, 16, ""),
    accesshash: jspb.Message.getFieldWithDefault(msg, 17, ""),
    firstname: jspb.Message.getFieldWithDefault(msg, 18, ""),
    lastname: jspb.Message.getFieldWithDefault(msg, 19, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.User}
 */
proto.telegram.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.User;
  return proto.telegram.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.User}
 */
proto.telegram.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelf(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContact(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMutualcontact(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBot(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBotchathistory(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBotnochats(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerified(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestricted(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMin(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBotinlinegeo(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupport(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScam(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setApplyminphoto(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFake(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesshash(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelf();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getContact();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMutualcontact();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getBot();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBotchathistory();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getBotnochats();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getVerified();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRestricted();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getMin();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getBotinlinegeo();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getSupport();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getScam();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getApplyminphoto();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getFake();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAccesshash();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getFirstname();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getLastname();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional bool self = 1;
 * @return {boolean}
 */
proto.telegram.User.prototype.getSelf = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setSelf = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool contact = 2;
 * @return {boolean}
 */
proto.telegram.User.prototype.getContact = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setContact = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool mutualContact = 3;
 * @return {boolean}
 */
proto.telegram.User.prototype.getMutualcontact = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setMutualcontact = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool deleted = 4;
 * @return {boolean}
 */
proto.telegram.User.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setDeleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool bot = 5;
 * @return {boolean}
 */
proto.telegram.User.prototype.getBot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setBot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool botChatHistory = 6;
 * @return {boolean}
 */
proto.telegram.User.prototype.getBotchathistory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setBotchathistory = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool botNochats = 7;
 * @return {boolean}
 */
proto.telegram.User.prototype.getBotnochats = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setBotnochats = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool verified = 8;
 * @return {boolean}
 */
proto.telegram.User.prototype.getVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool restricted = 9;
 * @return {boolean}
 */
proto.telegram.User.prototype.getRestricted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setRestricted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool min = 10;
 * @return {boolean}
 */
proto.telegram.User.prototype.getMin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setMin = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool botInlineGeo = 11;
 * @return {boolean}
 */
proto.telegram.User.prototype.getBotinlinegeo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setBotinlinegeo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool support = 12;
 * @return {boolean}
 */
proto.telegram.User.prototype.getSupport = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setSupport = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool scam = 13;
 * @return {boolean}
 */
proto.telegram.User.prototype.getScam = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setScam = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool applyMinPhoto = 14;
 * @return {boolean}
 */
proto.telegram.User.prototype.getApplyminphoto = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setApplyminphoto = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool fake = 15;
 * @return {boolean}
 */
proto.telegram.User.prototype.getFake = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setFake = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string id = 16;
 * @return {string}
 */
proto.telegram.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string accessHash = 17;
 * @return {string}
 */
proto.telegram.User.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setAccesshash = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string firstName = 18;
 * @return {string}
 */
proto.telegram.User.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setFirstname = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string lastName = 19;
 * @return {string}
 */
proto.telegram.User.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setLastname = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string phone = 20;
 * @return {string}
 */
proto.telegram.User.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.User} returns this
 */
proto.telegram.User.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.UserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.UserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.UserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.UserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.telegram.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.UserResponse}
 */
proto.telegram.UserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.UserResponse;
  return proto.telegram.UserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.UserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.UserResponse}
 */
proto.telegram.UserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.telegram.User;
      reader.readMessage(value,proto.telegram.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.UserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.UserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.UserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.UserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.telegram.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.telegram.User}
 */
proto.telegram.UserResponse.prototype.getUser = function() {
  return /** @type{?proto.telegram.User} */ (
    jspb.Message.getWrapperField(this, proto.telegram.User, 1));
};


/**
 * @param {?proto.telegram.User|undefined} value
 * @return {!proto.telegram.UserResponse} returns this
*/
proto.telegram.UserResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.telegram.UserResponse} returns this
 */
proto.telegram.UserResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.telegram.UserResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.SendMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.SendMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.SendMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.SendMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.SendMessageRequest}
 */
proto.telegram.SendMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.SendMessageRequest;
  return proto.telegram.SendMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.SendMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.SendMessageRequest}
 */
proto.telegram.SendMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.SendMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.SendMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.SendMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.SendMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string peer = 1;
 * @return {string}
 */
proto.telegram.SendMessageRequest.prototype.getPeer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.SendMessageRequest} returns this
 */
proto.telegram.SendMessageRequest.prototype.setPeer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.telegram.SendMessageRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.SendMessageRequest} returns this
 */
proto.telegram.SendMessageRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.telegram.DialogsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.DialogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.DialogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.DialogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.DialogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialogsList: jspb.Message.toObjectList(msg.getDialogsList(),
    proto.telegram.DialogResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.DialogsResponse}
 */
proto.telegram.DialogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.DialogsResponse;
  return proto.telegram.DialogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.DialogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.DialogsResponse}
 */
proto.telegram.DialogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.telegram.DialogResponse;
      reader.readMessage(value,proto.telegram.DialogResponse.deserializeBinaryFromReader);
      msg.addDialogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.DialogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.DialogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.DialogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.DialogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.telegram.DialogResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DialogResponse dialogs = 1;
 * @return {!Array<!proto.telegram.DialogResponse>}
 */
proto.telegram.DialogsResponse.prototype.getDialogsList = function() {
  return /** @type{!Array<!proto.telegram.DialogResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.telegram.DialogResponse, 1));
};


/**
 * @param {!Array<!proto.telegram.DialogResponse>} value
 * @return {!proto.telegram.DialogsResponse} returns this
*/
proto.telegram.DialogsResponse.prototype.setDialogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.telegram.DialogResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.telegram.DialogResponse}
 */
proto.telegram.DialogsResponse.prototype.addDialogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.telegram.DialogResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.telegram.DialogsResponse} returns this
 */
proto.telegram.DialogsResponse.prototype.clearDialogsList = function() {
  return this.setDialogsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.DialogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.DialogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.DialogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.DialogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialog: (f = msg.getDialog()) && proto.telegram.Dialog.toObject(includeInstance, f),
    pinned: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    folderid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    archived: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    message: (f = msg.getMessage()) && proto.telegram.Message.toObject(includeInstance, f),
    date: jspb.Message.getFieldWithDefault(msg, 6, 0),
    id: jspb.Message.getFieldWithDefault(msg, 7, 0),
    name: jspb.Message.getFieldWithDefault(msg, 8, ""),
    title: jspb.Message.getFieldWithDefault(msg, 9, ""),
    unreadcount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    unreadmentionscount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    isuser: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    isgroup: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    ischannel: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.DialogResponse}
 */
proto.telegram.DialogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.DialogResponse;
  return proto.telegram.DialogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.DialogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.DialogResponse}
 */
proto.telegram.DialogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.telegram.Dialog;
      reader.readMessage(value,proto.telegram.Dialog.deserializeBinaryFromReader);
      msg.setDialog(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFolderid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setArchived(value);
      break;
    case 5:
      var value = new proto.telegram.Message;
      reader.readMessage(value,proto.telegram.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadcount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadmentionscount(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsuser(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgroup(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIschannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.DialogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.DialogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.DialogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.DialogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialog();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.telegram.Dialog.serializeBinaryToWriter
    );
  }
  f = message.getPinned();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getFolderid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getArchived();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.telegram.Message.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUnreadcount();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getUnreadmentionscount();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getIsuser();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getIsgroup();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIschannel();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional Dialog dialog = 1;
 * @return {?proto.telegram.Dialog}
 */
proto.telegram.DialogResponse.prototype.getDialog = function() {
  return /** @type{?proto.telegram.Dialog} */ (
    jspb.Message.getWrapperField(this, proto.telegram.Dialog, 1));
};


/**
 * @param {?proto.telegram.Dialog|undefined} value
 * @return {!proto.telegram.DialogResponse} returns this
*/
proto.telegram.DialogResponse.prototype.setDialog = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.clearDialog = function() {
  return this.setDialog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.telegram.DialogResponse.prototype.hasDialog = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool pinned = 2;
 * @return {boolean}
 */
proto.telegram.DialogResponse.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setPinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 folderId = 3;
 * @return {number}
 */
proto.telegram.DialogResponse.prototype.getFolderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setFolderid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool archived = 4;
 * @return {boolean}
 */
proto.telegram.DialogResponse.prototype.getArchived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setArchived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Message message = 5;
 * @return {?proto.telegram.Message}
 */
proto.telegram.DialogResponse.prototype.getMessage = function() {
  return /** @type{?proto.telegram.Message} */ (
    jspb.Message.getWrapperField(this, proto.telegram.Message, 5));
};


/**
 * @param {?proto.telegram.Message|undefined} value
 * @return {!proto.telegram.DialogResponse} returns this
*/
proto.telegram.DialogResponse.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.telegram.DialogResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 date = 6;
 * @return {number}
 */
proto.telegram.DialogResponse.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 id = 7;
 * @return {number}
 */
proto.telegram.DialogResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string name = 8;
 * @return {string}
 */
proto.telegram.DialogResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string title = 9;
 * @return {string}
 */
proto.telegram.DialogResponse.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 unreadCount = 10;
 * @return {number}
 */
proto.telegram.DialogResponse.prototype.getUnreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setUnreadcount = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 unreadMentionsCount = 11;
 * @return {number}
 */
proto.telegram.DialogResponse.prototype.getUnreadmentionscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setUnreadmentionscount = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool isUser = 12;
 * @return {boolean}
 */
proto.telegram.DialogResponse.prototype.getIsuser = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setIsuser = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool isGroup = 13;
 * @return {boolean}
 */
proto.telegram.DialogResponse.prototype.getIsgroup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setIsgroup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool isChannel = 14;
 * @return {boolean}
 */
proto.telegram.DialogResponse.prototype.getIschannel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.DialogResponse} returns this
 */
proto.telegram.DialogResponse.prototype.setIschannel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.Dialog.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.Dialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.Dialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.Dialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    pinned: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    unreadmark: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    topmessage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    readinboxmaxid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    readoutboxmaxid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    unreadcount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    unreadmentionscount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    notifysettings: (f = msg.getNotifysettings()) && proto.telegram.NotifySettings.toObject(includeInstance, f),
    pts: jspb.Message.getFieldWithDefault(msg, 9, 0),
    folderid: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.Dialog}
 */
proto.telegram.Dialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.Dialog;
  return proto.telegram.Dialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.Dialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.Dialog}
 */
proto.telegram.Dialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnreadmark(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTopmessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReadinboxmaxid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReadoutboxmaxid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadcount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadmentionscount(value);
      break;
    case 8:
      var value = new proto.telegram.NotifySettings;
      reader.readMessage(value,proto.telegram.NotifySettings.deserializeBinaryFromReader);
      msg.setNotifysettings(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPts(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFolderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.Dialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.Dialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.Dialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.Dialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPinned();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUnreadmark();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTopmessage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getReadinboxmaxid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReadoutboxmaxid();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUnreadcount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUnreadmentionscount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getNotifysettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.telegram.NotifySettings.serializeBinaryToWriter
    );
  }
  f = message.getPts();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getFolderid();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional bool pinned = 1;
 * @return {boolean}
 */
proto.telegram.Dialog.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setPinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool unreadMark = 2;
 * @return {boolean}
 */
proto.telegram.Dialog.prototype.getUnreadmark = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setUnreadmark = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 topMessage = 3;
 * @return {number}
 */
proto.telegram.Dialog.prototype.getTopmessage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setTopmessage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 readInboxMaxId = 4;
 * @return {number}
 */
proto.telegram.Dialog.prototype.getReadinboxmaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setReadinboxmaxid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 readOutboxMaxId = 5;
 * @return {number}
 */
proto.telegram.Dialog.prototype.getReadoutboxmaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setReadoutboxmaxid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 unreadCount = 6;
 * @return {number}
 */
proto.telegram.Dialog.prototype.getUnreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setUnreadcount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 unreadMentionsCount = 7;
 * @return {number}
 */
proto.telegram.Dialog.prototype.getUnreadmentionscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setUnreadmentionscount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional NotifySettings notifySettings = 8;
 * @return {?proto.telegram.NotifySettings}
 */
proto.telegram.Dialog.prototype.getNotifysettings = function() {
  return /** @type{?proto.telegram.NotifySettings} */ (
    jspb.Message.getWrapperField(this, proto.telegram.NotifySettings, 8));
};


/**
 * @param {?proto.telegram.NotifySettings|undefined} value
 * @return {!proto.telegram.Dialog} returns this
*/
proto.telegram.Dialog.prototype.setNotifysettings = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.clearNotifysettings = function() {
  return this.setNotifysettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.telegram.Dialog.prototype.hasNotifysettings = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 pts = 9;
 * @return {number}
 */
proto.telegram.Dialog.prototype.getPts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setPts = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 folderId = 10;
 * @return {number}
 */
proto.telegram.Dialog.prototype.getFolderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Dialog} returns this
 */
proto.telegram.Dialog.prototype.setFolderid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.NotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.NotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.NotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.NotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    showpreviews: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    silent: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    muteuntil: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sound: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.NotifySettings}
 */
proto.telegram.NotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.NotifySettings;
  return proto.telegram.NotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.NotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.NotifySettings}
 */
proto.telegram.NotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowpreviews(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSilent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMuteuntil(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.NotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.NotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.NotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.NotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShowpreviews();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSilent();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMuteuntil();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSound();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool showPreviews = 1;
 * @return {boolean}
 */
proto.telegram.NotifySettings.prototype.getShowpreviews = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.NotifySettings} returns this
 */
proto.telegram.NotifySettings.prototype.setShowpreviews = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool silent = 2;
 * @return {boolean}
 */
proto.telegram.NotifySettings.prototype.getSilent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.NotifySettings} returns this
 */
proto.telegram.NotifySettings.prototype.setSilent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 muteUntil = 3;
 * @return {number}
 */
proto.telegram.NotifySettings.prototype.getMuteuntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.NotifySettings} returns this
 */
proto.telegram.NotifySettings.prototype.setMuteuntil = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sound = 4;
 * @return {string}
 */
proto.telegram.NotifySettings.prototype.getSound = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.NotifySettings} returns this
 */
proto.telegram.NotifySettings.prototype.setSound = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    out: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    mentioned: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    mediaunread: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    silent: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    fromscheduled: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    legacy: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    edithide: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    pinned: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    viabotid: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    date: jspb.Message.getFieldWithDefault(msg, 12, 0),
    message: jspb.Message.getFieldWithDefault(msg, 13, ""),
    views: jspb.Message.getFieldWithDefault(msg, 16, 0),
    forwards: jspb.Message.getFieldWithDefault(msg, 17, 0),
    editdate: jspb.Message.getFieldWithDefault(msg, 19, 0),
    postauthor: jspb.Message.getFieldWithDefault(msg, 20, ""),
    groupedid: jspb.Message.getFieldWithDefault(msg, 21, 0),
    ttlperiod: jspb.Message.getFieldWithDefault(msg, 24, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.Message}
 */
proto.telegram.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.Message;
  return proto.telegram.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.Message}
 */
proto.telegram.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOut(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMentioned(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMediaunread(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSilent(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFromscheduled(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLegacy(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEdithide(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setViabotid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViews(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setForwards(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEditdate(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostauthor(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGroupedid(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTtlperiod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOut();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMentioned();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMediaunread();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSilent();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFromscheduled();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getLegacy();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getEdithide();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPinned();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getViabotid();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDate();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getViews();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getForwards();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getEditdate();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getPostauthor();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getGroupedid();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = message.getTtlperiod();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
};


/**
 * optional bool out = 1;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getOut = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setOut = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool mentioned = 2;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getMentioned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setMentioned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool mediaUnread = 3;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getMediaunread = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setMediaunread = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool silent = 4;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getSilent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setSilent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool fromScheduled = 5;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getFromscheduled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setFromscheduled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool legacy = 6;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getLegacy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setLegacy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool editHide = 7;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getEdithide = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setEdithide = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool pinned = 8;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setPinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool viaBotId = 10;
 * @return {boolean}
 */
proto.telegram.Message.prototype.getViabotid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setViabotid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional int32 date = 12;
 * @return {number}
 */
proto.telegram.Message.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string message = 13;
 * @return {string}
 */
proto.telegram.Message.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 views = 16;
 * @return {number}
 */
proto.telegram.Message.prototype.getViews = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setViews = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 forwards = 17;
 * @return {number}
 */
proto.telegram.Message.prototype.getForwards = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setForwards = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 editDate = 19;
 * @return {number}
 */
proto.telegram.Message.prototype.getEditdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setEditdate = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string postAuthor = 20;
 * @return {string}
 */
proto.telegram.Message.prototype.getPostauthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setPostauthor = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional int64 groupedId = 21;
 * @return {number}
 */
proto.telegram.Message.prototype.getGroupedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setGroupedid = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 ttlPeriod = 24;
 * @return {number}
 */
proto.telegram.Message.prototype.getTtlperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.telegram.Message} returns this
 */
proto.telegram.Message.prototype.setTtlperiod = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.telegram.MuteUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.telegram.MuteUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.telegram.MuteUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.MuteUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesshash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unmute: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.telegram.MuteUserRequest}
 */
proto.telegram.MuteUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.telegram.MuteUserRequest;
  return proto.telegram.MuteUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.telegram.MuteUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.telegram.MuteUserRequest}
 */
proto.telegram.MuteUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesshash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnmute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.telegram.MuteUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.telegram.MuteUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.telegram.MuteUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.telegram.MuteUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesshash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnmute();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.telegram.MuteUserRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.MuteUserRequest} returns this
 */
proto.telegram.MuteUserRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessHash = 2;
 * @return {string}
 */
proto.telegram.MuteUserRequest.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.telegram.MuteUserRequest} returns this
 */
proto.telegram.MuteUserRequest.prototype.setAccesshash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool unmute = 3;
 * @return {boolean}
 */
proto.telegram.MuteUserRequest.prototype.getUnmute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.telegram.MuteUserRequest} returns this
 */
proto.telegram.MuteUserRequest.prototype.setUnmute = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.telegram);
